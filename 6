from collections import deque

class VacuumCleanerAgent:
    def __init__(self, environment):
        self.environment = environment
        self.position = (0, 0)  # starting position
        self.cleaned_rooms = set()
        self.rows = len(environment)
        self.cols = len(environment[0])
        self.directions = ['up', 'down', 'left', 'right']
        self.direction_moves = {
            'up': (-1, 0),
            'down': (1, 0),
            'left': (0, -1),
            'right': (0, 1)
        }

    def get_current_status(self):
        x, y = self.position
        return self.environment[x][y]

    def move(self, direction):
        dx, dy = self.direction_moves[direction]
        x, y = self.position
        new_position = (x + dx, y + dy)
        if 0 <= new_position[0] < self.rows and 0 <= new_position[1] < self.cols:
            self.position = new_position
            return True
        return False

    def clean(self):
        x, y = self.position
        if self.environment[x][y] == 'dirty':
            self.environment[x][y] = 'clean'
            self.cleaned_rooms.add((x, y))

    def is_all_clean(self):
        for row in self.environment:
            if 'dirty' in row:
                return False
        return True

    def run(self):
        queue = deque([(self.position)])
        visited = set()

        while queue:
            self.position = queue.popleft()
            if self.position in visited:
                continue
            visited.add(self.position)

            if self.get_current_status() == 'dirty':
                self.clean()

            for direction in self.directions:
                if self.move(direction):
                    if self.position not in visited:
                        queue.append(self.position)
                    self.move(self.opposite_direction(direction))  # move back to the original position

    def opposite_direction(self, direction):
        if direction == 'up':
            return 'down'
        elif direction == 'down':
            return 'up'
        elif direction == 'left':
            return 'right'
        elif direction == 'right':
            return 'left'

# Example environment (2D grid)
# 'clean' represents a clean room
# 'dirty' represents a dirty room

environment = [
    ['clean', 'dirty', 'clean'],
    ['dirty', 'dirty', 'clean'],
    ['clean', 'clean', 'dirty']
]

agent = VacuumCleanerAgent(environment)
agent.run()

# Print the final state of the environment
for row in environment:
    print(row)

# Print the cleaned rooms
print("Cleaned rooms:", agent.cleaned_rooms)
