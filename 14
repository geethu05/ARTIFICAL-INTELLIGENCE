import math

class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # single list to represent 3x3 board
        self.current_winner = None

    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    @staticmethod
    def print_board_nums():
        # 0 | 1 | 2 etc (tells us what number corresponds to what box)
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)]
        for row in number_board:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def empty_squares(self):
        return ' ' in self.board

    def num_empty_squares(self):
        return self.board.count(' ')

    def make_move(self, square, letter):
        # if valid move, then make the move (assign square to letter)
        # then return true. if invalid, return false
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def winner(self, square, letter):
        # winner if 3 in a row anywhere.. we have to check all of these!
        # first let's check the row
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([spot == letter for spot in row]):
            return True
        # check column
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True
        # check diagonal
        # only if the square is an even number (0, 2, 4, 6, 8)
        # these are the only moves possible to win a diagonal
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]  # top-left to bottom-right diagonal
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]  # top-right to bottom-left diagonal
            if all([spot == letter for spot in diagonal2]):
                return True
        # if all these fail
        return False

    def minimax(self, depth, alpha, beta, maximizing_player):
        if self.current_winner == 'X':
            return -1
        elif self.current_winner == 'O':
            return 1
        elif not self.empty_squares():
            return 0

        if maximizing_player:
            max_eval = -math.inf
            for move in self.available_moves():
                self.make_move(move, 'O')
                eval = self.minimax(depth + 1, alpha, beta, False)
                self.board[move] = ' '  # undo move
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = math.inf
            for move in self.available_moves():
                self.make_move(move, 'X')
                eval = self.minimax(depth + 1, alpha, beta, True)
                self.board[move] = ' '  # undo move
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval

    def best_move(self):
        best_eval = -math.inf
        best_move = None
        alpha = -math.inf
        beta = math.inf
        for move in self.available_moves():
            self.make_move(move, 'O')
            eval = self.minimax(0, alpha, beta, False)
            self.board[move] = ' '  # undo move
            if eval > best_eval:
                best_eval = eval
                best_move = move
            alpha = max(alpha, eval)
        return best_move


def play_game():
    t = TicTacToe()
    t.print_board_nums()
    while t.empty_squares():
        # Player's move
        player_move = None
        while player_move not in t.available_moves():
            player_move = int(input("Enter your move (0-8): "))
        t.make_move(player_move, 'X')
        t.print_board()

        if t.winner(player_move, 'X'):
            print("Player X wins!")
            break

        if not t.empty_squares():
            print("It's a tie!")
            break

        # Computer's move (using minimax with alpha-beta pruning)
        computer_move = t.best_move()
        print(f"Computer O makes a move to square {computer_move}")
        t.make_move(computer_move, 'O')
        t.print_board()

        if t.winner(computer_move, 'O'):
            print("Computer O wins!")
            break

        if not t.empty_squares():
            print("It's a tie!")
            break

# Example usage:
if __name__ == '__main__':
    play_game()
