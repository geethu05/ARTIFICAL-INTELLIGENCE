from collections import deque

def is_valid(state):
    m1, c1, m2, c2, boat = state
    # Check if the number of missionaries and cannibals is within the valid range
    if not (0 <= m1 <= 3 and 0 <= c1 <= 3 and 0 <= m2 <= 3 and 0 <= c2 <= 3):
        return False
    # Check if missionaries are not outnumbered by cannibals on either side
    if (m1 > 0 and m1 < c1) or (m2 > 0 and m2 < c2):
        return False
    return True

def get_successors(state):
    m1, c1, m2, c2, boat = state
    successors = []
    if boat == 1:  # Boat is on the first bank
        new_boat = 0
        moves = [
            (1, 0), (2, 0), (0, 1), (0, 2), (1, 1)  # Possible moves: 1M, 2M, 1C, 2C, 1M1C
        ]
    else:  # Boat is on the second bank
        new_boat = 1
        moves = [
            (-1, 0), (-2, 0), (0, -1), (0, -2), (-1, -1)  # Possible moves: 1M, 2M, 1C, 2C, 1M1C
        ]
    
    for m, c in moves:
        new_state = (m1 - m * boat, c1 - c * boat, m2 + m * boat, c2 + c * boat, new_boat)
        if is_valid(new_state):
            successors.append(new_state)
    
    return successors

def bfs(initial_state):
    queue = deque([(initial_state, [])])
    visited = set()
    visited.add(initial_state)
    
    while queue:
        current_state, path = queue.popleft()
        
        if current_state == (0, 0, 3, 3, 0):
            return path + [current_state]
        
        for successor in get_successors(current_state):
            if successor not in visited:
                visited.add(successor)
                queue.append((successor, path + [current_state]))
    
    return None

def print_solution(solution):
    if not solution:
        print("No solution found.")
    else:
        for state in solution:
            print(f"Left bank: {state[0]}M {state[1]}C, Right bank: {state[2]}M {state[3]}C, Boat: {'Left' if state[4] == 1 else 'Right'}")

# Example usage:
initial_state = (3, 3, 0, 0, 1)  # 3 missionaries, 3 cannibals on the left bank, boat on the left bank
solution = bfs(initial_state)
print_solution(solution)
