import heapq

class PuzzleState:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.empty = self.board.index(0)

    def __lt__(self, other):
        return self.moves + self.manhattan_distance() < other.moves + other.manhattan_distance()

    def manhattan_distance(self):
        distance = 0
        for i in range(9):
            if self.board[i] == 0:
                continue
            x, y = divmod(i, 3)
            goal_x, goal_y = divmod(self.board[i] - 1, 3)
            distance += abs(x - goal_x) + abs(y - goal_y)
        return distance

    def is_goal(self):
        return self.board == list(range(1, 9)) + [0]

    def neighbors(self):
        x, y = divmod(self.empty, 3)
        neighbors = []
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_empty = nx * 3 + ny
                new_board = self.board[:]
                new_board[self.empty], new_board[new_empty] = new_board[new_empty], new_board[self.empty]
                neighbors.append(PuzzleState(new_board, self.moves + 1, self))
        return neighbors

def solve_puzzle(start_board):
    start_state = PuzzleState(start_board)
    if start_state.is_goal():
        return start_state

    frontier = []
    heapq.heappush(frontier, start_state)
    explored = set()
    explored.add(tuple(start_state.board))

    while frontier:
        current_state = heapq.heappop(frontier)
        if current_state.is_goal():
            return current_state

        for neighbor in current_state.neighbors():
            if tuple(neighbor.board) not in explored:
                heapq.heappush(frontier, neighbor)
                explored.add(tuple(neighbor.board))

    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state.board)
        state = state.previous
    return path[::-1]

def print_board(board):
    for i in range(3):
        print(board[i * 3:(i + 1) * 3])
    print()

# Example usage:
start_board = [1, 2, 3, 4, 5, 6, 7, 0, 8]  # An example start state
goal_state = solve_puzzle(start_board)

if goal_state:
    path = reconstruct_path(goal_state)
    print("Solution found in {} moves.".format(len(path) - 1))
    for board in path:
        print_board(board)
else:
    print("No solution found.")
